[{"E:\\New Project\\Ecommerce\\ecommerce\\src\\index.js":"1","E:\\New Project\\Ecommerce\\ecommerce\\src\\reportWebVitals.js":"2","E:\\New Project\\Ecommerce\\ecommerce\\src\\App.js":"3","E:\\New Project\\Grocery Store\\grocery\\src\\index.js":"4","E:\\New Project\\Grocery Store\\grocery\\src\\App.js":"5","E:\\New Project\\Grocery Store\\grocery\\src\\reportWebVitals.js":"6"},{"size":535,"mtime":1690860731194,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1690860731582,"results":"9","hashOfConfig":"8"},{"size":14678,"mtime":1691223909966,"results":"10","hashOfConfig":"8"},{"size":535,"mtime":1690860731194,"results":"11","hashOfConfig":"12"},{"size":16338,"mtime":1693921471971,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1690860731582,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"izh2lp",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"owd2el",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\New Project\\Ecommerce\\ecommerce\\src\\index.js",[],[],[],"E:\\New Project\\Ecommerce\\ecommerce\\src\\reportWebVitals.js",[],[],"E:\\New Project\\Ecommerce\\ecommerce\\src\\App.js",["36","37"],[],"import \"./App.css\";\nimport productsData from \"./productsData.json\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  const allProducts = productsData;   // Store data from json file\n  const [totalCost, setTotalCost] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [cartProducts, setCartProducts] = useState([]);\n  const [showCartPopup, setShowCartPopup] = useState(false);\n  const [displayCheckoutPage, setdisplayCheckoutPage] = useState(false);\n\n  const [selectedProduct, setSelectedProduct] = useState(null);\n\n  const handleCloseSelectedItemDiv = () => {\n    setSelectedProduct(null);\n  }\n\n  let [displayShoes, setDisplayShoes] = useState(true);\n  let [displayWatches, setDisplayWatches] = useState(false);\n  let [displayAllProducts, setDisplayAllProducts] = useState(false);\n\n  const handleDisplayShoes = () => {\n    setDisplayWatches(false);\n    setDisplayShoes(true);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(false);\n  };\n\n  const handleDisplayWatches = () => {\n    setDisplayShoes(false);\n    setDisplayWatches(true);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(false);\n  };\n\n  const handleSearchItem = (event) => {\n    setdisplayCheckoutPage(false);\n    setdisplayContainer(true);\n    const searchValue = event.target.value;\n    setSearchTerm(searchValue);\n\n    if(searchValue.length > 0) {\n      setDisplayShoes(false);\n      setDisplayWatches(false);\n      setDisplayAllProducts(true);\n    } \n    else {\n      setDisplayShoes(true);\n      setDisplayWatches(false);\n      setDisplayAllProducts(false);\n    }\n  };\n\n  const filteredProducts = allProducts.filter((product) =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const productDetailsRef = useRef(null);\n  const cartPopupRef = useRef(null);\n\n  const handleCartClick = (event) => {\n    event.stopPropagation();\n    setShowCartPopup(!showCartPopup);\n  };\n\n  const handleCart = (id, image, name, price, category, sizeVal) => {\n    const existingProductIndex = cartProducts.findIndex(\n      (product) => product.id === id\n    );\n\n    if(existingProductIndex !== -1) {\n      // If the product already exists\n      const updatedCartProducts = [...cartProducts];\n      updatedCartProducts[existingProductIndex].quantity++;\n      setCartProducts(updatedCartProducts);\n    } else {\n      const newCartItem = { id, image, name, price, category, quantity: 1, sizeVal };\n      setCartProducts((prevCartProducts) => [...prevCartProducts, newCartItem]);\n    }\n  };\n\n  const handleRemoveFromCart = (productId) => {\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.filter((product) => product.id !== productId)\n    );\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (cartPopupRef.current && !cartPopupRef.current.contains(event.target)) {\n        setShowCartPopup(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Remove products with quantity === 0 from the cart\n    setCartProducts((prevCartProducts) => prevCartProducts.filter((product) => product.quantity > 0));\n\n    // Recalculate the total cost after removing products with zero quantity\n    const totalCost = cartProducts.reduce((total, product) => total + Number(product.price) * product.quantity, 0);\n    setTotalCost(totalCost);\n  }, [cartProducts]);\n\n  useEffect(() => {\n    const totalCost = cartProducts.reduce((total, product) => total + Number(product.price) * product.quantity, 0);\n    setTotalCost(totalCost);\n\n    // Remove products with quantity === 0 from the cart\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.filter((product) => product.quantity > 0)\n    );\n  }, [cartProducts]);\n\n  const handleDecQuantity = (productId) => {\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.map((product) => {\n        if (product.id === productId && product.quantity > 0) {\n          return { ...product, quantity: product.quantity - 1 };\n        }\n        return product;\n      })\n    );\n  };\n\n  const handleIncQuantity = (productId) => {\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.map((product) => {\n        if (product.id === productId) {\n          return { ...product, quantity: product.quantity + 1 };\n        }\n        return product;\n      })\n    );\n  };\n\n  const renderProduct = (product, category) => (\n    <div className=\"productDesc\" key={product.id} onClick={() => setSelectedProduct(product)}>\n      <img id=\"productImg\" src={product.image[0]} alt={product.name} />\n      <h3>{product.name}</h3>\n      <p id=\"itemPrice\">â‚¹{product.price}</p>\n  \n      {cartProducts.some((cartProduct) => cartProduct.id === product.id) ? (\n        cartProducts.find((cartProduct) => cartProduct.id === product.id).quantity > 0 ? (\n          <div className=\"incDecQuantity\">\n            <button id=\"decQuantity\" onClick={() => handleDecQuantity(product.id)} className=\"circleButton\"> - </button>\n            <p id=\"quantity\"> {cartProducts.find((cartProduct) => cartProduct.id === product.id)?.quantity || 0} </p>\n            <button id=\"incQuantity\" onClick={() => handleIncQuantity(product.id)} className=\"circleButton\"> + </button>\n          </div>\n        ) : (\n          <button id=\"removeFromCartBtn\" onClick={() => handleRemoveFromCart(product.id)}> Remove from Cart </button>\n        )\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n\n  // Event handler for closing product details when clicking outside\n  const handleClickOutsideProductDetails = (event) => {\n    if (\n      productDetailsRef.current &&\n      !productDetailsRef.current.contains(event.target) &&\n    \n      event.target.id !== \"cart-logo\" &&\n      cartPopupRef.current && // Check if cartPopupRef exists before accessing contains\n      !cartPopupRef.current.contains(event.target)\n    ) {\n      handleCloseSelectedItemDiv();\n    }\n  };\n  \n  useEffect(() => {\n    // Add event listener when the component mounts\n    document.addEventListener(\"mousedown\", handleClickOutsideProductDetails);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutsideProductDetails);\n    };\n  }, []);\n\n  const [sizeVal, setSizeVal] = useState('');\n\n  const handleHeaderClick = () => {\n    setSelectedProduct(null);\n  }\n\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  const prevImage = (selectedProduct) => {\n    setCurrentImageIndex((prevIndex) => (prevIndex - 1 + selectedProduct.image.length) % selectedProduct.image.length);\n  };\n\n  const nextImage = (selectedProduct) => {\n    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % selectedProduct.image.length);\n  };\n\n  const [displayContainer, setdisplayContainer] = useState(true);\n\n  const handleCheckoutPage = () => {\n    //document.getElementById('shoesBtn').style.display = 'none';\n    //document.getElementById('watchesBtn').style.display = 'none';\n    setdisplayContainer(false);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(true);\n  }\n\n  const renderCartDetails = (\n    <div className=\"renderCart\">\n      {cartProducts.length > 0 ? (\n        cartProducts.map((product) => (\n          <div key={product.id} className=\"cartDetails\">\n            <img id=\"cartProductImg\" src={product.image[0]} alt={product.name} />\n            <p id=\"cartProductName\">{product.name}</p>\n            <p id=\"selectedSize\">Size: {sizeVal}</p>\n\n            {product.quantity > 0 ? (\n              <div className=\"incDecQuantity\">\n                <button id=\"decQuantity\" onClick={() => handleDecQuantity(product.id)} className=\"circleButton\"> - </button>\n                <p id=\"quantity\">{product.quantity}</p>\n                <button id=\"incQuantity\" onClick={() => handleIncQuantity(product.id)} className=\"circleButton\"> + </button>\n              </div>\n            ) : (\n              <button id=\"removeFromCartBtn\" onClick={() => handleRemoveFromCart(product.id)}> Remove from Cart </button>\n            )}\n            <p id=\"cartProductPrice\">â‚¹{product.price}</p>\n          </div>\n        ))\n      ) : (\n        <p>No products in the cart.</p>\n      )}\n\n      {cartProducts.length > 0 && (\n        <div className=\"totalPrice\">\n          <h3>Total Price: â‚¹{totalCost}</h3>\n        </div>\n      )}\n    </div>\n  )\n  \n  return (\n    <div className=\"app\">\n      <div className=\"header\" onClick={handleHeaderClick}>\n        <p id=\"logo\">ShopCart</p>\n        <input id=\"searchItem\" placeholder=\"Search Product\" onChange={handleSearchItem} />\n\n        <div id=\"cart-logo\" onClick={handleCartClick}> Cart </div>\n        {showCartPopup && (\n          <div ref={cartPopupRef} id=\"cart-popup\" className=\"cart-popup\" >\n            <div className=\"cart-content\">\n              {renderCartDetails}\n              <button id=\"buynowBtn\" onClick={handleCheckoutPage}>Buy Now</button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"container\">\n        {displayContainer && (\n          <div className=\"shoppingItem\">\n            <div className=\"allItemsBtn\">\n              <button id=\"shoesBtn\" className={displayShoes ? \"shoesActive\" : \"\"} onClick={handleDisplayShoes}> Shoes </button>\n              <button id=\"watchesBtn\" className={displayWatches ? \"watchesActive\" : \"\"} onClick={handleDisplayWatches}> Watches </button>\n            </div>\n\n            {displayAllProducts && (\n              <div className=\"allProducts\">\n                {filteredProducts.map((product) => (\n                  renderProduct(product, product.category)\n                ))}\n              </div>\n            )}\n\n            {displayShoes && (\n              <div className=\"shoes\">\n                {filteredProducts\n                  .filter((product) => product.category === \"Shoes\")\n                  .map((product) => (\n                    renderProduct(product, \"Shoes\")\n                  ))}\n              </div>\n            )}\n\n            {displayWatches && (\n              <div className=\"watches\">\n                {filteredProducts\n                  .filter((product) => product.category === \"Watches\")\n                  .map((product) => (\n                    renderProduct(product, \"Watches\")\n                  ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {displayCheckoutPage && (\n          <div className=\"checkoutPage\">\n            <div>{renderCartDetails}</div>\n            \n            <div>\n              <h2>Checkout</h2>\n              <form>\n                <div class=\"form-group\">\n                  <input type=\"text\" id=\"fullName\" name=\"fullName\" placeholder=\"Full Name\" required />\n                  <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" required />\n                  <input type=\"text\" id=\"address\" name=\"address\" placeholder=\"Address\" required />\n                  <input type=\"text\" id=\"city\" name=\"city\" placeholder=\"City\" required />\n                  <input type=\"text\" id=\"zipCode\" name=\"zipCode\" placeholder=\"ZIP code\" required />\n                  <input type=\"text\" id=\"phoneno\" name=\"phoneNo\" placeholder=\"Phone Number\" required />\n                  <button type=\"submit\">Place Order</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {selectedProduct && (\n        <div ref={productDetailsRef} className=\"product-details\">\n          <div className=\"detailedProductImageDiv\">\n            <button id=\"prevImg\" onClick={() => {prevImage(selectedProduct)}}><h1>&#60;</h1></button>\n            <img id=\"detailedProductImg\" src={selectedProduct.image[currentImageIndex]} alt=\"Product Image\" className=\"detailed-product-img\" />\n            <button id=\"nextImg\" onClick={() => {nextImage(selectedProduct)}}><h1>&#62;</h1></button>           \n          </div>\n\n          <div className=\"inner-product-details\">\n            <h1>{selectedProduct.name}</h1>\n            <h2>â‚¹{selectedProduct.price}</h2>\n\n            {selectedProduct.category === \"Shoes\" ? (\n              <div className=\"sizeBtn\">\n                <button id=\"shoesSize\" className={sizeVal === 7 ? 'selected' : ''} onClick={(e) => setSizeVal(7)}>7</button>\n                <button id=\"shoesSize\" className={sizeVal === 8 ? 'selected' : ''} onClick={(e) => setSizeVal(8)}>8</button>\n                <button id=\"shoesSize\" className={sizeVal === 9 ? 'selected' : ''} onClick={(e) => setSizeVal(9)}>9</button>\n                <button id=\"shoesSize\" className={sizeVal === 10 ? 'selected' : ''} onClick={(e) => setSizeVal(10)}>10</button>\n                <button id=\"shoesSize\" className={sizeVal === 11 ? 'selected' : ''} onClick={(e) => setSizeVal(11)}>11</button>\n              </div>\n            ) : selectedProduct.category === \"Watches\" ? (\n              <div className=\"sizeBtn\">\n                <button id=\"watchSize\" className={sizeVal === 'S' ? 'selected' : ''} onClick={(e) => setSizeVal('S')}>S</button>\n                <button id=\"watchSize\" className={sizeVal === 'M' ? 'selected' : ''} onClick={(e) => setSizeVal('M')}>M</button>\n                <button id=\"watchSize\" className={sizeVal === 'L' ? 'selected' : ''} onClick={(e) => setSizeVal('L')}>L</button>\n              </div>\n            ) : null}\n\n            <h4 id=\"description\">Description</h4>\n            <p>{selectedProduct.description}</p>\n\n            {cartProducts.some((cartProduct) => cartProduct.id === selectedProduct.id) ? (\n              cartProducts.find((cartProduct) => cartProduct.id === selectedProduct.id).quantity > 0 ? (\n                <div className=\"detailedIncDecQuantity\">\n                  <button id=\"detailedDecQuantity\" onClick={() => handleDecQuantity(selectedProduct.id)} className=\"circleButton\"> - </button>\n                  <p id=\"detailedQuantity\"> {cartProducts.find((cartProduct) => cartProduct.id === selectedProduct.id)?.quantity || 0} </p>\n                  <button id=\"detailedIncQuantity\" onClick={() => handleIncQuantity(selectedProduct.id)} className=\"circleButton\"> + </button>\n                </div>\n              ) : (\n                <button id=\"detailedRemoveFromCartBtn\" onClick={() => handleRemoveFromCart(selectedProduct.id)}> Remove from Cart </button>\n              )\n            ) : (\n              <button id=\"detailedAddToCartBtn\" onClick={() => handleCart(selectedProduct.id, selectedProduct.image, selectedProduct.name, selectedProduct.price, selectedProduct.category, sizeVal)}> Add to Cart </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;","E:\\New Project\\Grocery Store\\grocery\\src\\index.js",[],[],"E:\\New Project\\Grocery Store\\grocery\\src\\App.js",["38","39"],[],"import \"./App.css\";\nimport productsData from \"./productsData.json\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  const allProducts = productsData;   // Store data from json file\n  const [totalCost, setTotalCost] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [cartProducts, setCartProducts] = useState([]);\n  const [showCartPopup, setShowCartPopup] = useState(false);\n  const [displayCheckoutPage, setdisplayCheckoutPage] = useState(false);\n\n  const [selectedProduct, setSelectedProduct] = useState(null);\n\n  const handleCloseSelectedItemDiv = () => {\n    setSelectedProduct(null);\n  }\n\n  let [displayFruitsVeg, setDisplayFruitsVeg] = useState(true);\n  let [displayChocoBiscuit, setDisplayChocoBiscuit] = useState(false);\n  let [displayDairyBreadEggs, setDisplayDairyBreadEggs] = useState(false);\n  let [displayColdDrinksIcecream, setDisplayColdDrinksIcecream] = useState(false);\n  \n  let [displayAllProducts, setDisplayAllProducts] = useState(false);\n\n  const handleDisplayFruitsVeg = () => {\n    setSelectedProduct(null);\n    setDisplayChocoBiscuit(false);\n    setDisplayDairyBreadEggs(false);\n    setDisplayColdDrinksIcecream(false);\n    setDisplayFruitsVeg(true);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(false);\n  };\n\n  const handleDisplayChocoBiscuit = () => {\n    setSelectedProduct(null);\n    setDisplayFruitsVeg(false);\n    setDisplayDairyBreadEggs(false);\n    setDisplayColdDrinksIcecream(false);\n    setDisplayChocoBiscuit(true);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(false);\n  };\n\n  const handleDisplayDairyBreadEggs = () => {\n    setSelectedProduct(null);\n    setDisplayFruitsVeg(false);\n    setDisplayChocoBiscuit(false);\n    setDisplayColdDrinksIcecream(false);\n    setDisplayDairyBreadEggs(true);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(false);\n  };\n\n  const handleDisplayColdDrinksIcecream = () => {\n    setSelectedProduct(null);\n    setDisplayFruitsVeg(false);\n    setDisplayChocoBiscuit(false);\n    setDisplayDairyBreadEggs(false);\n    setDisplayColdDrinksIcecream(true);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(false);\n  };\n\n  const handleSearchItem = (event) => {\n    setdisplayCheckoutPage(false);\n    setdisplayContainer(true);\n    \n    const searchValue = event.target.value;\n    setSearchTerm(searchValue);\n\n    if(searchValue.length > 0) {\n      setDisplayFruitsVeg(false);\n      setDisplayChocoBiscuit(false);\n      setDisplayDairyBreadEggs(false);\n      setDisplayColdDrinksIcecream(false);\n      setDisplayAllProducts(true);\n    } \n    else {\n      setDisplayFruitsVeg(true);\n      setDisplayChocoBiscuit(false);\n      setDisplayDairyBreadEggs(false);\n      setDisplayColdDrinksIcecream(false);\n      setDisplayAllProducts(false);\n    }\n  };\n\n  const filteredProducts = allProducts.filter((product) =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const productDetailsRef = useRef(null);\n  const cartPopupRef = useRef(null);\n\n  const handleCartClick = (event) => {\n    event.stopPropagation();\n    setShowCartPopup(!showCartPopup);\n  };\n\n  const handleCart = (id, image, name, price, category, quantityVal) => {\n    const existingProductIndex = cartProducts.findIndex(\n      (product) => product.id === id\n    );\n\n    if(existingProductIndex !== -1) {\n      // If the product already exists\n      const updatedCartProducts = [...cartProducts];\n      updatedCartProducts[existingProductIndex].quantity++;\n      setCartProducts(updatedCartProducts);\n    } else {\n      const newCartItem = { id, image, name, price, category, quantity: 1, quantityVal };\n      setCartProducts((prevCartProducts) => [...prevCartProducts, newCartItem]);\n    }\n  };\n\n  const handleRemoveFromCart = (productId) => {\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.filter((product) => product.id !== productId)\n    );\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (cartPopupRef.current && !cartPopupRef.current.contains(event.target)) {\n        setShowCartPopup(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Remove products with quantity === 0 from the cart\n    setCartProducts((prevCartProducts) => prevCartProducts.filter((product) => product.quantity > 0));\n\n    // Recalculate the total cost after removing products with zero quantity\n    const totalCost = cartProducts.reduce((total, product) => total + Number(product.price) * product.quantity, 0);\n    setTotalCost(totalCost);\n  }, [cartProducts]);\n\n  useEffect(() => {\n    const totalCost = cartProducts.reduce((total, product) => total + Number(product.price) * product.quantity, 0);\n    setTotalCost(totalCost);\n\n    // Remove products with quantity === 0 from the cart\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.filter((product) => product.quantity > 0)\n    );\n  }, [cartProducts]);\n\n  const handleDecQuantity = (productId) => {\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.map((product) => {\n        if (product.id === productId && product.quantity > 0) {\n          return { ...product, quantity: product.quantity - 1 };\n        }\n        return product;\n      })\n    );\n  };\n\n  const handleIncQuantity = (productId) => {\n    setCartProducts((prevCartProducts) =>\n      prevCartProducts.map((product) => {\n        if (product.id === productId) {\n          return { ...product, quantity: product.quantity + 1 };\n        }\n        return product;\n      })\n    );\n  };\n\n  const renderProduct = (product, category) => (\n    <div className=\"productDesc\" key={product.id} onClick={() => setSelectedProduct(product)}>\n      <img id=\"productImg\" src={product.image[0]} alt={product.name} />\n      <h3>{product.name}</h3>\n      <p id=\"itemPrice\">â‚¹{product.price}</p>\n  \n      {cartProducts.some((cartProduct) => cartProduct.id === product.id) ? (\n        cartProducts.find((cartProduct) => cartProduct.id === product.id).quantity > 0 ? (\n          <div className=\"incDecQuantity\">\n            <button id=\"decQuantity\" onClick={() => handleDecQuantity(product.id)} className=\"circleButton\"> - </button>\n            <p id=\"quantity\"> {cartProducts.find((cartProduct) => cartProduct.id === product.id)?.quantity || 0} </p>\n            <button id=\"incQuantity\" onClick={() => handleIncQuantity(product.id)} className=\"circleButton\"> + </button>\n          </div>\n        ) : (\n          <button id=\"removeFromCartBtn\" onClick={() => handleRemoveFromCart(product.id)}> Remove from Cart </button>\n        )\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n\n  // Event handler for closing product details when clicking outside\n  const handleClickOutsideProductDetails = (event) => {\n    if (\n      productDetailsRef.current &&\n      !productDetailsRef.current.contains(event.target) &&\n    \n      event.target.id !== \"cart-logo\" &&\n      cartPopupRef.current && // Check if cartPopupRef exists before accessing contains\n      !cartPopupRef.current.contains(event.target)\n    ) {\n      handleCloseSelectedItemDiv();\n    }\n  };\n  \n  useEffect(() => {\n    // Add event listener when the component mounts\n    document.addEventListener(\"mousedown\", handleClickOutsideProductDetails);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutsideProductDetails);\n    };\n  }, []);\n\n  const [quantityVal, setQuantity] = useState('');\n\n  const handleHeaderClick = () => {\n    setSelectedProduct(null);\n  }\n\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  const prevImage = (selectedProduct) => {\n    setCurrentImageIndex((prevIndex) => (prevIndex - 1 + selectedProduct.image.length) % selectedProduct.image.length);\n  };\n\n  const nextImage = (selectedProduct) => {\n    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % selectedProduct.image.length);\n  };\n\n  const [displayContainer, setdisplayContainer] = useState(true);\n\n  const handleCheckoutPage = () => {\n    setdisplayContainer(false);\n    setDisplayAllProducts(false);\n    setdisplayCheckoutPage(true);\n  }\n\n  const renderCartDetails = (\n    <div className=\"renderCart\">\n      {cartProducts.length > 0 ? (\n        cartProducts.map((product) => (\n          <div key={product.id} className=\"cartDetails\">\n            <img id=\"cartProductImg\" src={product.image[0]} alt={product.name} />\n            <p id=\"cartProductName\">{product.name}</p>\n            <p id=\"selectedSize\">Quantity: {quantityVal}</p>\n\n            {product.quantity > 0 ? (\n              <div className=\"incDecQuantity\">\n                <button id=\"decQuantity\" onClick={() => handleDecQuantity(product.id)} className=\"circleButton\"> - </button>\n                <p id=\"quantity\">{product.quantity}</p>\n                <button id=\"incQuantity\" onClick={() => handleIncQuantity(product.id)} className=\"circleButton\"> + </button>\n              </div>\n            ) : (\n              <button id=\"removeFromCartBtn\" onClick={() => handleRemoveFromCart(product.id)}> Remove from Cart </button>\n            )}\n            <p id=\"cartProductPrice\">â‚¹{product.price}</p>\n          </div>\n        ))\n      ) : (\n        <p>No products in the cart.</p>\n      )}\n\n      {cartProducts.length > 0 && (\n        <div className=\"totalPrice\">\n          <h3>Total Price: â‚¹{totalCost}</h3>\n        </div>\n      )}\n    </div>\n  )\n  \n  return (\n    <div className=\"app\">\n      <div className=\"header\" onClick={handleHeaderClick}>\n        <p id=\"logo\">Grocery Store</p>\n        <input id=\"searchItem\" placeholder=\"Search Product\" onChange={handleSearchItem} />\n\n        <div id=\"cart-logo\" onClick={handleCartClick}> Cart </div>\n        {showCartPopup && (\n          <div ref={cartPopupRef} id=\"cart-popup\" className=\"cart-popup\" >\n            <div className=\"cart-content\">\n              {renderCartDetails}\n              <button id=\"buynowBtn\" onClick={handleCheckoutPage}>Buy Now</button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"container\">\n        {displayContainer && (\n          <div className=\"shoppingItem\">\n            <div className=\"allItemsBtn\">\n              <button id=\"fruitsVegBtn\" className={displayFruitsVeg ? \"fruitsVegActive\" : \"\"} onClick={handleDisplayFruitsVeg}> Fruits & Vegetables </button>\n              <button id=\"chocolateBiscuitBtn\" className={displayChocoBiscuit ? \"chocoBiscuitActive\" : \"\"} onClick={handleDisplayChocoBiscuit}> Chocolate & Biscuits </button>\n              <button id=\"dairyBreadEggsBtn\" className={displayDairyBreadEggs ? \"dairyBreadEggsActive\" : \"\"} onClick={handleDisplayDairyBreadEggs}> Dairy, Bread & Eggs </button>\n              <button id=\"coldDrinksIcecreamBtn\" className={displayColdDrinksIcecream ? \"coldDrinksIcecreamActive\" : \"\"} onClick={handleDisplayColdDrinksIcecream}> ColdDrinks & Icecream </button>\n            </div>\n\n            {displayAllProducts && (\n              <div className=\"allProducts\">\n                {filteredProducts.map((product) => (\n                  renderProduct(product, product.category)\n                ))}\n              </div>\n            )}\n\n            {displayFruitsVeg && (\n              <div className=\"fruitsVeg\">\n                {filteredProducts\n                  .filter((product) => product.category === \"fruitsVeg\")\n                  .map((product) => (\n                    renderProduct(product, \"fruitsVeg\")\n                  ))}\n              </div>\n            )}\n\n            {displayChocoBiscuit && (\n              <div className=\"chocoBiscuit\">\n                {filteredProducts\n                  .filter((product) => product.category === \"chocoBiscuit\")\n                  .map((product) => (\n                    renderProduct(product, \"chocoBiscuit\")\n                  ))}\n              </div>\n            )}\n\n            {displayDairyBreadEggs && (\n              <div className=\"dairyBreadEggs\">\n                {filteredProducts\n                  .filter((product) => product.category === \"dairyBreadEggs\")\n                  .map((product) => (\n                    renderProduct(product, \"dairyBreadEggs\")\n                  ))}\n              </div>\n            )}\n\n            {displayColdDrinksIcecream && (\n              <div className=\"coldDrinksIcecream\">\n                {filteredProducts\n                  .filter((product) => product.category === \"coldDrinksIcecream\")\n                  .map((product) => (\n                    renderProduct(product, \"coldDrinksIcecream\")\n                  ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {displayCheckoutPage && (\n          <div className=\"checkoutPage\">\n            <div>{renderCartDetails}</div>\n            \n            <div>\n              <h2>Checkout</h2>\n              <form>\n                <div class=\"form-group\">\n                  <input type=\"text\" id=\"fullName\" name=\"fullName\" placeholder=\"Full Name\" required />\n                  <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" required />\n                  <input type=\"text\" id=\"address\" name=\"address\" placeholder=\"Address\" required />\n                  <input type=\"text\" id=\"city\" name=\"city\" placeholder=\"City\" required />\n                  <input type=\"text\" id=\"zipCode\" name=\"zipCode\" placeholder=\"ZIP code\" required />\n                  <input type=\"text\" id=\"phoneno\" name=\"phoneNo\" placeholder=\"Phone Number\" required />\n                  <button type=\"submit\">Place Order</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {selectedProduct && (\n        <div ref={productDetailsRef} className=\"product-details\">\n          <div className=\"detailedProductImageDiv\">\n            <button id=\"prevImg\" onClick={() => {prevImage(selectedProduct)}}><h1>&#60;</h1></button>\n            <img id=\"detailedProductImg\" src={selectedProduct.image[currentImageIndex]} alt=\"Product Image\" className=\"detailed-product-img\" />\n            <button id=\"nextImg\" onClick={() => {nextImage(selectedProduct)}}><h1>&#62;</h1></button>           \n          </div>\n\n          <div className=\"inner-product-details\">\n            <h1>{selectedProduct.name}</h1>\n            <h2>â‚¹{selectedProduct.price}</h2>\n\n            {selectedProduct.category === \"fruitsVeg\" ? (\n              <div className=\"quantity\">\n                <button id=\"fruitVegQuantity\" className={quantityVal === '1kg' ? 'selected' : ''} onClick={(e) => setQuantity('1kg')}>1kg</button>\n              </div>\n            ) : selectedProduct.category === \"chocoBiscuit\" ? (\n              <div className=\"quantity\"></div>\n            ) : selectedProduct.category === \"dairyBreadEggs\" ? (\n              <div className=\"quantity\"></div>\n            ) : selectedProduct.category === \"coldDrinksIcecream\" ? (\n              <div className=\"quantity\"></div>\n            ): null}\n\n            <h4 id=\"description\">Description</h4>\n            <p>{selectedProduct.description}</p>\n\n            {cartProducts.some((cartProduct) => cartProduct.id === selectedProduct.id) ? (\n              cartProducts.find((cartProduct) => cartProduct.id === selectedProduct.id).quantity > 0 ? (\n                <div className=\"detailedIncDecQuantity\">\n                  <button id=\"detailedDecQuantity\" onClick={() => handleDecQuantity(selectedProduct.id)} className=\"circleButton\"> - </button>\n                  <p id=\"detailedQuantity\"> {cartProducts.find((cartProduct) => cartProduct.id === selectedProduct.id)?.quantity || 0} </p>\n                  <button id=\"detailedIncQuantity\" onClick={() => handleIncQuantity(selectedProduct.id)} className=\"circleButton\"> + </button>\n                </div>\n              ) : (\n                <button id=\"detailedRemoveFromCartBtn\" onClick={() => handleRemoveFromCart(selectedProduct.id)}> Remove from Cart </button>\n              )\n            ) : (\n              <button id=\"detailedAddToCartBtn\" onClick={() => handleCart(selectedProduct.id, selectedProduct.image, selectedProduct.name, selectedProduct.price, selectedProduct.category, quantityVal)}> Add to Cart </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;","E:\\New Project\\Grocery Store\\grocery\\src\\reportWebVitals.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":188,"column":6,"nodeType":"42","endLine":188,"endColumn":8,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":330,"column":13,"nodeType":"46","endLine":330,"endColumn":144},{"ruleId":"40","severity":1,"message":"41","line":222,"column":6,"nodeType":"42","endLine":222,"endColumn":8,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"45","line":384,"column":13,"nodeType":"46","endLine":384,"endColumn":144},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickOutsideProductDetails'. Either include it or remove the dependency array.","ArrayExpression",["48"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["49"],{"desc":"50","fix":"51"},{"desc":"50","fix":"52"},"Update the dependencies array to be: [handleClickOutsideProductDetails]",{"range":"53","text":"54"},{"range":"55","text":"54"},[6343,6345],"[handleClickOutsideProductDetails]",[7554,7556]]